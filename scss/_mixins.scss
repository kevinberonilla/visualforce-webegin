@mixin animated($property: all, $duration: 250ms, $function: ease) {
    transition: $property $duration $function;
}
@mixin column-width($width, $affix) {
    &-#{$affix} {
        width: $width;
    }
}
@mixin column-margin($margin, $affix) {
    &-#{$affix} {
        margin-left: $margin;
    }
}
@mixin column-float-right-margin($margin, $affix) {
    &-#{$affix} {
        margin-left: 0;
        margin-right: $margin;
    }
}
@mixin breakpoint-columns($establish) {
    .column {
        @each $column in $column-list {
            &.#{nth($column, 1)} {
                @include column-width(nth($column, 2), $establish);
            }
        }
        @each $column in $column-list {
            &.margin-#{nth($column, 1)} {
                @include column-margin(nth($column, 2), $establish);
            }
        }
        &.float-right {
            @each $column in $column-list {
                &.margin-#{nth($column, 1)} {
                    @include column-float-right-margin(nth($column, 2), $establish);
                }
            }
        }
    }
}
@mixin type-margin {
    + * {
        margin-top: $type-spacing;
        &:after {
            margin: 0;
        }
    }
}
@mixin color-classes($property) {
    @each $color in $color-list {
        &.#{nth($color, 1)} {
            #{$property}: nth($color, 2);
        }
    }
}
@mixin background-color-classes($alpha: 1) {
    @each $color in $color-list {
        &.#{nth($color, 1)} {
            background-color: rgba(nth($color, 2), $alpha);
        }
    }
}
@mixin breakpoint-text-aligns($establish) {
    .align-left-#{$establish} {
        text-align: left;
    }
    .align-right-#{$establish} {
        text-align: right
    }
    .align-center-#{$establish} {
        text-align: center;
    }
}
@mixin adjustment-properties($adjustment-value, $property-value, $pixels) {
    @if (nth($adjustment-value, 1) == b) {
        @if (nth($property-value, 1) == a) {
            #{nth($adjustment-value, 2)}: $card-border;
            border-width: #{$pixels}px;
        } @else {
            #{nth($adjustment-value, 2)}-#{nth($property-value, 2)}: $card-border;
            border-width: #{$pixels}px;
        }
    } @else {
        @if (nth($property-value, 1) == a) {
            #{nth($adjustment-value, 2)}: #{$pixels}px;
        } @else {
            #{nth($adjustment-value, 2)}-#{nth($property-value, 2)}: #{$pixels}px;
        }
    }
}
@mixin adjustments($breakpoint: null) {
    @if ($breakpoint) {
        @each $adjustment in $adjustment-list {
            &-#{nth($adjustment, 1)} {
                @each $property in $property-list {
                    &-#{nth($property, 1)} {
                        @for $i from 0 through $adjustment-max {
                            &-#{$i}-#{$breakpoint} {
                                @include adjustment-properties($adjustment, $property, $i);
                            }
                        }
                    }
                }
            }
        }
    } @else {
        @each $adjustment in $adjustment-list {
            &-#{nth($adjustment, 1)} {
                @each $property in $property-list {
                    &-#{nth($property, 1)} {
                        @for $i from 1 through $adjustment-max {
                            &-#{$i} {
                                @include adjustment-properties($adjustment, $property, $i);
                            }
                        }
                    }
                }
            }
        }
    }
}