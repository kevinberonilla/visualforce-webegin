@mixin animated($property: all, $duration: 250ms, $function: ease) {
    transition: $property $duration $function;
}
@mixin type-margin {
    + * {
        margin-top: $type-spacing;
        &:after {
            margin: 0;
        }
    }
}
@mixin column-width($width, $affix) {
    &-#{$affix} {
        width: $width;
    }
}
@mixin column-margin($margin, $affix) {
    &-#{$affix} {
        margin-left: $margin;
    }
}
@mixin column-float-right-margin($margin, $affix) {
    &-#{$affix} {
        margin-left: 0;
        margin-right: $margin;
    }
}
@mixin breakpoint-columns($establish, $override: null) {
    .column {
        @if ($override) {
            @each $column in $column-list {
                &.#{nth($column, 1)}-#{$override} {
                    width: 100%;
                }
            }
        } @else {
            @each $column in $column-list {
                &.#{nth($column, 1)} {
                    width: 100%;
                }
            }
        }
        @each $column in $column-list {
            &.#{nth($column, 1)} {
                @include column-width(nth($column, 2), $establish);
            }
        }
        @if ($override) {
            @each $column in $column-list {
                &.margin-#{nth($column, 1)}-#{$override} {
                    margin-left: 0;
                }
            }
        } @else {
            @each $column in $column-list {
                &.margin-#{nth($column, 1)} {
                    margin-left: 0;
                }
            }
        }
        @each $column in $column-list {
            &.margin-#{nth($column, 1)} {
                @include column-margin(nth($column, 2), $establish);
            }
        }
        &.float-right {
            @if ($override) {
                @each $column in $column-list {
                    &.margin-#{nth($column, 1)}-#{$override} {
                        margin-right: 0;
                    }
                }
            } @else {
                @each $column in $column-list {
                    &.margin-#{nth($column, 1)} {
                        margin-right: 0;
                    }
                }
            }
            @each $column in $column-list {
                &.margin-#{nth($column, 1)} {
                    @include column-float-right-margin(nth($column, 2), $establish);
                }
            }
        }
    }
}
@mixin color-classes($property) {
    @each $color in $color-list {
        &.#{nth($color, 1)} {
            #{$property}: nth($color, 2);
        }
    }
}
@mixin background-color-classes($alpha: 1) {
    @each $color in $color-list {
        &.#{nth($color, 1)} {
            background-color: rgba(nth($color, 2), $alpha);
        }
    }
}
@mixin breakpoint-text-aligns($establish, $override: null) {
    @if ($override) {
        .align-left-#{$override}, .align-right-#{$override}, .align-center-#{$override} {
            text-align: inherit;
        }
    } @else {
        .align-left, .align-right, .align-center {
            text-align: inherit;
        }
    }
    .align-left-#{$establish} {
        text-align: left;
    }
    .align-right-#{$establish} {
        text-align: right
    }
    .align-center-#{$establish} {
        text-align: center;
    }
}
/*@mixin breakpoint-adjustments($establish, $override: null) {
    if ($override) {
        
    } @else {
        
    }
}*/
@mixin adjustments($breakpoint: false) {
    @if ($breakpoint) {
        @each $adjustment in $adjustment-list {
            &-#{nth($adjustment, 1)} {
                @each $property in $property-list {
                    &-#{nth($property, 1)} {
                        @for $i from 1 through $adjustment-max {
                            &-#{$i} {
                                @if (nth($adjustment, 1) == b) { // Border only
                                    @if (nth($property, 1) == a) {
                                        #{nth($adjustment, 2)}: $card-border;
                                        border-width: #{$i}px;
                                    } @else {
                                        #{nth($adjustment, 2)}-#{nth($property, 2)}: $card-border;
                                        border-width: #{$i}px;
                                    }
                                } @else {
                                    @if (nth($property, 1) == a) {
                                        #{nth($adjustment, 2)}: #{$i}px;
                                    } @else {
                                        #{nth($adjustment, 2)}-#{nth($property, 2)}: #{$i}px;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    } @else {
        @each $adjustment in $adjustment-list {
            &-#{nth($adjustment, 1)} {
                @each $property in $property-list {
                    &-#{nth($property, 1)} {
                        @for $i from 1 through $adjustment-max {
                            &-#{$i} {
                                @if (nth($adjustment, 1) == b) { // Border only
                                    @if (nth($property, 1) == a) {
                                        #{nth($adjustment, 2)}: $card-border;
                                        border-width: #{$i}px;
                                    } @else {
                                        #{nth($adjustment, 2)}-#{nth($property, 2)}: $card-border;
                                        border-width: #{$i}px;
                                    }
                                } @else {
                                    @if (nth($property, 1) == a) {
                                        #{nth($adjustment, 2)}: #{$i}px;
                                    } @else {
                                        #{nth($adjustment, 2)}-#{nth($property, 2)}: #{$i}px;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}